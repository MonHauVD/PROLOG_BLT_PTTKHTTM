% BTL alpha
domains
    i = integer
    r = real
	sb = symbol
	ar = r*
	as = sb*
database
	ten_nguoi_dung(symbol)
	ten_ko_hop_le(symbol)
	diem_mon_hoc(symbol, real)
	% mon_hoc(Nam_hoc, Hoc_ki, Ten_mon, Cac loi khuyen Gioi, Kha, TB, Yeu, Kem)
	mon_hoc(integer, integer, symbol, symbol, symbol, symbol, symbol, symbol)
predicates
	prepare
	member(r, ar)
	is_empty_ls(ar)
	is_not_empty_ls(ar)
	
	len_list(ar, r)
	sum_list(ar, r)
	averager(ar, r)
	nhap_mang(ar, r)
	in_mang(ar)
	in_mang2(ar)
	
	cmp_str(sb, as, i)
	cmp_str1(sb, as, i, i)
	ktraten(sb, i)
	
	lay_ds_mon(i, i, as)
	nhap_diem(as)
	nhap_diem_lai(as)
	ktra_diem_nhap(r, as)
	
	lay_ds_diem(ar)
	tinh_tb(r)
	
	dua_ra_loi_khuyen_tung_mon
	dua_ra_loi_khuyen_tong_quat(r)
	
	loi_khuyen(as, ar)
	loi_khuyen1(sb, r)
	
	s
	
	
clauses
	prepare :-
		assert(ten_ko_hop_le("abc")),
		assert(ten_ko_hop_le("aaa")),
		assert(ten_ko_hop_le("123")),
	
		assert(mon_hoc(1, 1, "A11", "GioiA11", "KhaA11", "TBA11", "YeuA11", "KemA11")),
		assert(mon_hoc(1, 1, "B11", "GioiB11", "KhaB11", "TBB11", "YeuB11", "KemB11")),
		assert(mon_hoc(1, 1, "C11", "GioiC11", "KhaC11", "TBC11", "YeuC11", "KemC11")),
		assert(mon_hoc(1, 1, "D11", "GioiD11", "KhaD11", "TBD11", "YeuD11", "KemD11")),
		assert(mon_hoc(1, 1, "E11", "GioiE11", "KhaE11", "TBE11", "YeuE11", "KemE11")),
		
		assert(mon_hoc(1, 2, "A12", "GioiA12", "KhaA12", "TBA12", "YeuA12", "KemA12")),
		assert(mon_hoc(1, 2, "B12", "GioiB12", "KhaB12", "TBB12", "YeuB12", "KemB12")),
		assert(mon_hoc(1, 2, "C12", "GioiC12", "KhaC12", "TBC12", "YeuC12", "KemC12")),
		assert(mon_hoc(1, 2, "D12", "GioiD12", "KhaD12", "TBD12", "YeuD12", "KemD12")),
		assert(mon_hoc(1, 2, "E12", "GioiE12", "KhaE12", "TBE12", "YeuE12", "KemE12")),
		
		assert(mon_hoc(2, 1, "A21", "GioiA21", "KhaA21", "TBA21", "YeuA21", "KemA21")),
		assert(mon_hoc(2, 1, "B21", "GioiB21", "KhaB21", "TBB21", "YeuB21", "KemB21")),
		assert(mon_hoc(2, 1, "C21", "GioiC21", "KhaC21", "TBC21", "YeuC21", "KemC21")),
		assert(mon_hoc(2, 1, "D21", "GioiD21", "KhaD21", "TBD21", "YeuD21", "KemD21")),
		assert(mon_hoc(2, 1, "E21", "GioiE21", "KhaE21", "TBE21", "YeuE21", "KemE21")),
		
		assert(mon_hoc(2, 2, "A22", "GioiA22", "KhaA22", "TBA22", "YeuA22", "KemA22")),
		assert(mon_hoc(2, 2, "B22", "GioiB22", "KhaB22", "TBB22", "YeuB22", "KemB22")),
		assert(mon_hoc(2, 2, "C22", "GioiC22", "KhaC22", "TBC22", "YeuC22", "KemC22")),
		assert(mon_hoc(2, 2, "D22", "GioiD22", "KhaD22", "TBD22", "YeuD22", "KemD22")),
		assert(mon_hoc(2, 2, "E22", "GioiE22", "KhaE22", "TBE22", "YeuE22", "KemE22")),
		
		assert(mon_hoc(3, 1, "A31", "GioiA31", "KhaA31", "TBA31", "YeuA31", "KemA31")),
		assert(mon_hoc(3, 1, "B31", "GioiB31", "KhaB31", "TBB31", "YeuB31", "KemB31")),
		assert(mon_hoc(3, 1, "C31", "GioiC31", "KhaC31", "TBC31", "YeuC31", "KemC31")),
		assert(mon_hoc(3, 1, "D31", "GioiD31", "KhaD31", "TBD31", "YeuD31", "KemD31")),
		assert(mon_hoc(3, 1, "E31", "GioiE31", "KhaE31", "TBE31", "YeuE31", "KemE31")),
		
		assert(mon_hoc(3, 2, "A32", "GioiA32", "KhaA32", "TBA32", "YeuA32", "KemA32")),
		assert(mon_hoc(3, 2, "B32", "GioiB32", "KhaB32", "TBB32", "YeuB32", "KemB32")),
		assert(mon_hoc(3, 2, "C32", "GioiC32", "KhaC32", "TBC32", "YeuC32", "KemC32")),
		assert(mon_hoc(3, 2, "D32", "GioiD32", "KhaD32", "TBD32", "YeuD32", "KemD32")),
		assert(mon_hoc(3, 2, "E32", "GioiE32", "KhaE32", "TBE32", "YeuE32", "KemE32")),
		
		assert(mon_hoc(4, 1, "A41", "GioiA41", "KhaA41", "TBA41", "YeuA41", "KemA41")),
		assert(mon_hoc(4, 1, "B41", "GioiB41", "KhaB41", "TBB41", "YeuB41", "KemB41")),
		assert(mon_hoc(4, 1, "C41", "GioiC41", "KhaC41", "TBC41", "YeuC41", "KemC41")),
		assert(mon_hoc(4, 1, "D41", "GioiD41", "KhaD41", "TBD41", "YeuD41", "KemD41")),
		assert(mon_hoc(4, 1, "E41", "GioiE41", "KhaE41", "TBE41", "YeuE41", "KemE41")),
		
		assert(mon_hoc(4, 2, "A42", "GioiA42", "KhaA42", "TBA42", "YeuA42", "KemA42")),
		assert(mon_hoc(4, 2, "B42", "GioiB42", "KhaB42", "TBB42", "YeuB42", "KemB42")),
		assert(mon_hoc(4, 2, "C42", "GioiC42", "KhaC42", "TBC42", "YeuC42", "KemC42")),
		assert(mon_hoc(4, 2, "D42", "GioiD42", "KhaD42", "TBD42", "YeuD42", "KemD42")),
		assert(mon_hoc(4, 2, "E42", "GioiE42", "KhaE42", "TBE42", "YeuE42", "KemE42")),
		
		assert(mon_hoc(5, 1, "A51", "GioiA51", "KhaA51", "TBA51", "YeuA51", "KemA51")),
		assert(mon_hoc(5, 1, "B51", "GioiB51", "KhaB51", "TBB51", "YeuB51", "KemB51")),
		assert(mon_hoc(5, 1, "C51", "GioiC51", "KhaC51", "TBC51", "YeuC51", "KemC51")),
		assert(mon_hoc(5, 1, "D51", "GioiD51", "KhaD51", "TBD51", "YeuD51", "KemD51")),
		assert(mon_hoc(5, 1, "E51", "GioiE51", "KhaE51", "TBE51", "YeuE51", "KemE51")).
	
	
	member(X, [X | _]).
	member(X, [_ | T]) :-
		member(X, T).
		
	is_empty_ls([]) :- !.
	is_empty_ls([_|_]) :- fail.
	is_not_empty_ls([_|_]).
	
	len_list([], 0) :- !.
	len_list([_|T], Len) :-
		len_list(T, Len1),
		Len = Len1 + 1.
	
		
	sum_list([], 0).
	sum_list([H|T], Sum) :-
		sum_list(T, Rest),
		Sum = H + Rest.
	
	averager(List, Res) :-
		sum_list(List, Sum),
		len_list(List, Len),
		%write("Sum = ", Sum, "; Len = ", Len), nl,
		Len <> 0,
		Res = Sum/Len;
		Res = 0.

	nhap_mang([X|Mang], N) :-
		N > 0,
		write("Nhap phan tu: "),
		readreal(X),
		N2 = N - 1,
		nhap_mang(Mang, N2).
		
	nhap_mang([],N) :- N = 0.

	in_mang(Mang):- write("["),
					in_mang2(Mang).
					
	in_mang2([]).
	
	in_mang2([H|T]) :-
		is_not_empty_ls(T),
		write(H),
		write(", "),
		in_mang2(T);
		write(H),
		write("]").
	
	cmp_str(S0, [S0|_], 0) :- !.	
	cmp_str(_, [], -1) :- !.
	cmp_str(S0, List, Res) :-
		cmp_str1(S0, List, Res, 0).
		
	cmp_str1(_, [], -1, _) :- !.
	
	cmp_str1(S0, [H|T], Res, It):-
		S0 = H,
		Res = It + 0;
		It2 = It + 1,
		cmp_str1(S0, T, Res, It2).
		
	ktraten(S0, Res) :-
		findall(Ten, ten_ko_hop_le(Ten), Ten_ko_Hop_le).
		cmp_str(S0, Ten_ko_Hop_le, Res).
	
	lay_ds_mon(Nam, Ki, Ds_mon) :-
		findall(Ten_mon, mon_hoc(Nam, Ki, Ten_mon, _, _, _, _, _), Ds_mon).
	
	nhap_diem([]).
	nhap_diem([H|T]) :-
		write("Nhap diem mon: ", H), nl,
		readreal(Diem),
		ktra_diem_nhap(Diem, [H|T]).
	ktra_diem_nhap(Diem, [H|T]) :-
		Diem >= 0.0, Diem <= 10.0,
		assert(diem_mon_hoc(H, Diem)),
		nhap_diem(T);
		nhap_diem_lai([H|T]).
	nhap_diem_lai([H|T]) :-
		write("Dieu kien 0 <= diem <= 10\nNhap lai diem mon: ", H), nl,
		readreal(Diem),
		ktra_diem_nhap(Diem, [H|T]).
	
	
	lay_ds_diem(Ds_diem) :-
		findall(Diem, diem_mon_hoc(_, Diem), Ds_diem).

	tinh_tb(Diem_tb) :-
		lay_ds_diem(Ds_diem),
		%write("Ds diem: ", Ds_diem), nl,
		averager(Ds_diem ,Diem_tb).
	
	dua_ra_loi_khuyen_tung_mon :-
		findall(Mon, diem_mon_hoc(Mon, _), Ds_mon),
		findall(Diem, diem_mon_hoc(_, Diem), Ds_diem),
		loi_khuyen(Ds_mon, Ds_diem).
	
	loi_khuyen([],[]) :- !.
	loi_khuyen([H_mon|T_mon], [H_diem|T_diem]) :-
		loi_khuyen1(H_mon, H_diem),
		loi_khuyen(T_mon, T_diem).
		
	loi_khuyen1(H_mon, H_diem) :-
		H_diem >= 8.5,
		mon_hoc(_, _, H_mon, X, _, _, _, _),
		write("Loi khuyen cho mon ", H_mon, ": ", X), nl;
		H_diem >= 7.0,
		mon_hoc(_, _, H_mon, _, X, _, _, _),
		write("Loi khuyen cho mon ", H_mon, ": ", X), nl;
		H_diem >= 5.5,
		mon_hoc(_, _, H_mon, _, _, X, _, _),
		write("Loi khuyen cho mon ", H_mon, ": ", X), nl;
		H_diem >= 4.0,
		mon_hoc(_, _, H_mon, _, _, _, X, _),
		write("Loi khuyen cho mon ", H_mon, ": ", X), nl;
		H_diem < 4.0,
		mon_hoc(_, _, H_mon, _, _, _, _, X),
		write("Loi khuyen cho mon ", H_mon, ": ", X), nl.
	
	dua_ra_loi_khuyen_tong_quat(Diem_tb):-
		Diem_tb >= 8.5,
		write("Dat loai Gioi"), nl;
		Diem_tb >= 7.0,
		write("Dat loai Kha"), nl;
		Diem_tb >= 5.5,
		write("Dat loai TB"), nl;
		Diem_tb >= 4.0,
		write("Dat loai Yeu"), nl;
		Diem_tb < 4.0,
		write("Dat loai Kem"), nl.
		
s :- prepare,
	write("Hay nhap ten cua ban: "),
	readln(Name),
	assert(ten_nguoi_dung(Name)),
	ktraten(Name, IsValidName),
	%write("IsValidName = ", IsValidName), nl,
	IsValidName <> -1, % Neu ten khong hop le
		retract(ten_nguoi_dung(Name)),
		write("Ten khong hop le! Ket thuc chuong trinh."), nl		
	;
	write("Nhap nam hoc thu (1, 2, 3, 4, 5): "), nl,
	readint(Nam),
	write("Nhap hoc ki (1, 2): "), nl,
	readint(Ki),
	lay_ds_mon(Nam, Ki, Ds_mon),
	nhap_diem(Ds_mon),
	tinh_tb(Diem_tb),
	write("Diem trung binh: ", Diem_tb), nl,
	dua_ra_loi_khuyen_tung_mon,
	dua_ra_loi_khuyen_tong_quat(Diem_tb),
	ten_nguoi_dung(Name),
	write("Cam on ", Name, " da su dung chuong trinh cua nhom 2!\n").

 